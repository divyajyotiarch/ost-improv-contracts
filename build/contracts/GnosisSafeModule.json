{
  "contractName": "GnosisSafeModule",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "contract GnosisSafeModuleManagerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract GnosisSafeModuleManagerInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Instead of inheriting from     gnosis/safe-contracts/contracts/base/Module.sol and pulling all needed     contracts by Module.sol into openst-contracts building process,     we define this contract, that contains only required, public interface     of Module.sol. *      The current contract is non-upgradable in contrast to GnosisSafe     Module contract.\",\"methods\":{},\"title\":\"Contract contains the required, public interface by       gnosis/safe-contracts/contracts/base/Module.sol\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/OST/Documents/dj/ost-opt-contracts/contracts/openst-contracts/contracts/gnosis_safe_modules/GnosisSafeModule.sol\":\"GnosisSafeModule\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/OST/Documents/dj/ost-opt-contracts/contracts/openst-contracts/contracts/gnosis_safe_modules/GnosisSafeModule.sol\":{\"keccak256\":\"0x593c6815028d6f449dce117fafe6980121ed563f6aa765995b61a5b706491c06\",\"urls\":[\"bzz-raw://a242815cd011f4ee644b916576ed5e200f08b4859ed3e34a25f5dcd8d3428b25\",\"dweb:/ipfs/QmW5hAAUdT83DwJrs4W6EjGr78kageWCp1oTcpzXAdPbzy\"]},\"/Users/OST/Documents/dj/ost-opt-contracts/contracts/openst-contracts/contracts/gnosis_safe_modules/GnosisSafeModuleManagerInterface.sol\":{\"keccak256\":\"0x6fefe712f557f7c07f91532de76dec66fa76e796bb6a7dd2855e50b626cf99a4\",\"urls\":[\"bzz-raw://f60c928af251952411d871127bf65bb33e445ee7dfc272d255064d23fecdf49b\",\"dweb:/ipfs/QmYn1vRQZt6j2rJtft9pcHkSQ85PCzdeWav2Z3xZ3ZiYxD\"]},\"/Users/OST/Documents/dj/ost-opt-contracts/contracts/openst-contracts/contracts/proxies/MasterCopyNonUpgradable.sol\":{\"keccak256\":\"0x8a4470b15bc28c34d29be7bca87e920ee13ee49dd86e9fa6c2c59efcd51ae99c\",\"urls\":[\"bzz-raw://2048ba2556d78489c907aee901cef89080668d13e1fa36498bfe2cfa0a88740d\",\"dweb:/ipfs/Qmc3xduqrPxiCfjm9Njohea5HFBRbZL97H5Z2bEDpKm6CM\"]}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b5060938061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063481c6a7514602d575b600080fd5b6033604f565b604080516001600160a01b039092168252519081900360200190f35b6001546001600160a01b03168156fea265627a7a7231582034fe889beed98965997b857272df4d066213cd29ef58bfc631cd66f94fc1b28c64736f6c63430005100032",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063481c6a7514602d575b600080fd5b6033604f565b604080516001600160a01b039092168252519081900360200190f35b6001546001600160a01b03168156fea265627a7a7231582034fe889beed98965997b857272df4d066213cd29ef58bfc631cd66f94fc1b28c64736f6c63430005100032",
  "sourceMap": "1232:322:37:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1232:322:37;;;;;;;",
  "deployedSourceMap": "1232:322:37:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1232:322:37;;;;;;;;;;;;;;;;;;;1310:47;;;:::i;:::-;;;;-1:-1:-1;;;;;1310:47:37;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1310:47:37;;:::o",
  "source": "pragma solidity ^0.5.0;\n\n// Copyright 2019 OpenST Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport \"../proxies/MasterCopyNonUpgradable.sol\";\nimport \"./GnosisSafeModuleManagerInterface.sol\";\n\n/**\n * @title Contract contains the required, public interface by\n *        gnosis/safe-contracts/contracts/base/Module.sol\n *\n * @dev Instead of inheriting from\n *      gnosis/safe-contracts/contracts/base/Module.sol and pulling all needed\n *      contracts by Module.sol into openst-contracts building process,\n *      we define this contract, that contains only required, public interface\n *      of Module.sol.\n *\n *      The current contract is non-upgradable in contrast to GnosisSafe\n *      Module contract.\n */\ncontract GnosisSafeModule is MasterCopyNonUpgradable\n{\n    /* Storage */\n\n    GnosisSafeModuleManagerInterface public manager;\n\n\n    /* Modifiers */\n\n    modifier authorized() {\n        require(\n            msg.sender == address(manager),\n            \"Method can only be called from manager\"\n        );\n\n        _;\n    }\n}",
  "sourcePath": "/Users/OST/Documents/dj/ost-opt-contracts/contracts/openst-contracts/contracts/gnosis_safe_modules/GnosisSafeModule.sol",
  "ast": {
    "absolutePath": "/Users/OST/Documents/dj/ost-opt-contracts/contracts/openst-contracts/contracts/gnosis_safe_modules/GnosisSafeModule.sol",
    "exportedSymbols": {
      "GnosisSafeModule": [
        4751
      ]
    },
    "id": 4752,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4730,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:37"
      },
      {
        "absolutePath": "/Users/OST/Documents/dj/ost-opt-contracts/contracts/openst-contracts/contracts/proxies/MasterCopyNonUpgradable.sol",
        "file": "../proxies/MasterCopyNonUpgradable.sol",
        "id": 4731,
        "nodeType": "ImportDirective",
        "scope": 4752,
        "sourceUnit": 5425,
        "src": "613:48:37",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/OST/Documents/dj/ost-opt-contracts/contracts/openst-contracts/contracts/gnosis_safe_modules/GnosisSafeModuleManagerInterface.sol",
        "file": "./GnosisSafeModuleManagerInterface.sol",
        "id": 4732,
        "nodeType": "ImportDirective",
        "scope": 4752,
        "sourceUnit": 4772,
        "src": "662:48:37",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4733,
              "name": "MasterCopyNonUpgradable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 5424,
              "src": "1261:23:37",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MasterCopyNonUpgradable_$5424",
                "typeString": "contract MasterCopyNonUpgradable"
              }
            },
            "id": 4734,
            "nodeType": "InheritanceSpecifier",
            "src": "1261:23:37"
          }
        ],
        "contractDependencies": [
          5424
        ],
        "contractKind": "contract",
        "documentation": "@title Contract contains the required, public interface by\n       gnosis/safe-contracts/contracts/base/Module.sol\n * @dev Instead of inheriting from\n     gnosis/safe-contracts/contracts/base/Module.sol and pulling all needed\n     contracts by Module.sol into openst-contracts building process,\n     we define this contract, that contains only required, public interface\n     of Module.sol.\n *      The current contract is non-upgradable in contrast to GnosisSafe\n     Module contract.",
        "fullyImplemented": true,
        "id": 4751,
        "linearizedBaseContracts": [
          4751,
          5424
        ],
        "name": "GnosisSafeModule",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 4736,
            "name": "manager",
            "nodeType": "VariableDeclaration",
            "scope": 4751,
            "src": "1310:47:37",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_GnosisSafeModuleManagerInterface_$4771",
              "typeString": "contract GnosisSafeModuleManagerInterface"
            },
            "typeName": {
              "contractScope": null,
              "id": 4735,
              "name": "GnosisSafeModuleManagerInterface",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4771,
              "src": "1310:32:37",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_GnosisSafeModuleManagerInterface_$4771",
                "typeString": "contract GnosisSafeModuleManagerInterface"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4749,
              "nodeType": "Block",
              "src": "1408:144:37",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4744,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 4739,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12881,
                            "src": "1439:3:37",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 4740,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1439:10:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 4742,
                              "name": "manager",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4736,
                              "src": "1461:7:37",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_GnosisSafeModuleManagerInterface_$4771",
                                "typeString": "contract GnosisSafeModuleManagerInterface"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_GnosisSafeModuleManagerInterface_$4771",
                                "typeString": "contract GnosisSafeModuleManagerInterface"
                              }
                            ],
                            "id": 4741,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1453:7:37",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 4743,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1453:16:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1439:30:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d6574686f642063616e206f6e6c792062652063616c6c65642066726f6d206d616e61676572",
                        "id": 4745,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1483:40:37",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f857f17fb7e241a141cb689ce417fc402008e9655fbe55c721e32587b5d510de",
                          "typeString": "literal_string \"Method can only be called from manager\""
                        },
                        "value": "Method can only be called from manager"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f857f17fb7e241a141cb689ce417fc402008e9655fbe55c721e32587b5d510de",
                          "typeString": "literal_string \"Method can only be called from manager\""
                        }
                      ],
                      "id": 4738,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        12884,
                        12885
                      ],
                      "referencedDeclaration": 12885,
                      "src": "1418:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4746,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1418:115:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4747,
                  "nodeType": "ExpressionStatement",
                  "src": "1418:115:37"
                },
                {
                  "id": 4748,
                  "nodeType": "PlaceholderStatement",
                  "src": "1544:1:37"
                }
              ]
            },
            "documentation": null,
            "id": 4750,
            "name": "authorized",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 4737,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1405:2:37"
            },
            "src": "1386:166:37",
            "visibility": "internal"
          }
        ],
        "scope": 4752,
        "src": "1232:322:37"
      }
    ],
    "src": "0:1554:37"
  },
  "legacyAST": {
    "absolutePath": "/Users/OST/Documents/dj/ost-opt-contracts/contracts/openst-contracts/contracts/gnosis_safe_modules/GnosisSafeModule.sol",
    "exportedSymbols": {
      "GnosisSafeModule": [
        4751
      ]
    },
    "id": 4752,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 4730,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:37"
      },
      {
        "absolutePath": "/Users/OST/Documents/dj/ost-opt-contracts/contracts/openst-contracts/contracts/proxies/MasterCopyNonUpgradable.sol",
        "file": "../proxies/MasterCopyNonUpgradable.sol",
        "id": 4731,
        "nodeType": "ImportDirective",
        "scope": 4752,
        "sourceUnit": 5425,
        "src": "613:48:37",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/OST/Documents/dj/ost-opt-contracts/contracts/openst-contracts/contracts/gnosis_safe_modules/GnosisSafeModuleManagerInterface.sol",
        "file": "./GnosisSafeModuleManagerInterface.sol",
        "id": 4732,
        "nodeType": "ImportDirective",
        "scope": 4752,
        "sourceUnit": 4772,
        "src": "662:48:37",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 4733,
              "name": "MasterCopyNonUpgradable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 5424,
              "src": "1261:23:37",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MasterCopyNonUpgradable_$5424",
                "typeString": "contract MasterCopyNonUpgradable"
              }
            },
            "id": 4734,
            "nodeType": "InheritanceSpecifier",
            "src": "1261:23:37"
          }
        ],
        "contractDependencies": [
          5424
        ],
        "contractKind": "contract",
        "documentation": "@title Contract contains the required, public interface by\n       gnosis/safe-contracts/contracts/base/Module.sol\n * @dev Instead of inheriting from\n     gnosis/safe-contracts/contracts/base/Module.sol and pulling all needed\n     contracts by Module.sol into openst-contracts building process,\n     we define this contract, that contains only required, public interface\n     of Module.sol.\n *      The current contract is non-upgradable in contrast to GnosisSafe\n     Module contract.",
        "fullyImplemented": true,
        "id": 4751,
        "linearizedBaseContracts": [
          4751,
          5424
        ],
        "name": "GnosisSafeModule",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 4736,
            "name": "manager",
            "nodeType": "VariableDeclaration",
            "scope": 4751,
            "src": "1310:47:37",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_GnosisSafeModuleManagerInterface_$4771",
              "typeString": "contract GnosisSafeModuleManagerInterface"
            },
            "typeName": {
              "contractScope": null,
              "id": 4735,
              "name": "GnosisSafeModuleManagerInterface",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4771,
              "src": "1310:32:37",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_GnosisSafeModuleManagerInterface_$4771",
                "typeString": "contract GnosisSafeModuleManagerInterface"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 4749,
              "nodeType": "Block",
              "src": "1408:144:37",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 4744,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 4739,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12881,
                            "src": "1439:3:37",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 4740,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1439:10:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 4742,
                              "name": "manager",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4736,
                              "src": "1461:7:37",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_GnosisSafeModuleManagerInterface_$4771",
                                "typeString": "contract GnosisSafeModuleManagerInterface"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_GnosisSafeModuleManagerInterface_$4771",
                                "typeString": "contract GnosisSafeModuleManagerInterface"
                              }
                            ],
                            "id": 4741,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1453:7:37",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 4743,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1453:16:37",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1439:30:37",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "4d6574686f642063616e206f6e6c792062652063616c6c65642066726f6d206d616e61676572",
                        "id": 4745,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1483:40:37",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_f857f17fb7e241a141cb689ce417fc402008e9655fbe55c721e32587b5d510de",
                          "typeString": "literal_string \"Method can only be called from manager\""
                        },
                        "value": "Method can only be called from manager"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_f857f17fb7e241a141cb689ce417fc402008e9655fbe55c721e32587b5d510de",
                          "typeString": "literal_string \"Method can only be called from manager\""
                        }
                      ],
                      "id": 4738,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        12884,
                        12885
                      ],
                      "referencedDeclaration": 12885,
                      "src": "1418:7:37",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4746,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1418:115:37",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4747,
                  "nodeType": "ExpressionStatement",
                  "src": "1418:115:37"
                },
                {
                  "id": 4748,
                  "nodeType": "PlaceholderStatement",
                  "src": "1544:1:37"
                }
              ]
            },
            "documentation": null,
            "id": 4750,
            "name": "authorized",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 4737,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1405:2:37"
            },
            "src": "1386:166:37",
            "visibility": "internal"
          }
        ],
        "scope": 4752,
        "src": "1232:322:37"
      }
    ],
    "src": "0:1554:37"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.21",
  "updatedAt": "2020-01-19T09:48:26.123Z",
  "devdoc": {
    "details": "Instead of inheriting from     gnosis/safe-contracts/contracts/base/Module.sol and pulling all needed     contracts by Module.sol into openst-contracts building process,     we define this contract, that contains only required, public interface     of Module.sol. *      The current contract is non-upgradable in contrast to GnosisSafe     Module contract.",
    "methods": {},
    "title": "Contract contains the required, public interface by       gnosis/safe-contracts/contracts/base/Module.sol"
  },
  "userdoc": {
    "methods": {}
  }
}